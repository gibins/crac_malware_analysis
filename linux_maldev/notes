Lateral Movement
----------------

    -> How to find credentials
        -> environment variables
        -> searching for files in known paths (SSH etc)
        -> brute force (SSH)

    -> Move laterally using credentials
        -> SSH with non-interactive shell
            -> execute commands
            -> capture outputs


    C2 <------> V1 <--------> I1 <--------> V2 (diff vlan)

                V1 <----X---> V2
                I1 has internet access.
                V2 does not have direct internet access either (so cannot connect to C2 directly)

    Some sort of proxy
        ->  We know how to use SSH library
            -> probably can setup some sort of SHS tunnelling

        -> Write a proxy from scratch   <--- this is what we will do.

Types of proxies
----------------
    1. Forward proxy
        Accept connection at one end, connect to remote at other end
            and pass packets around
    2. Reverse proxy
        Connect to two hosts, and pass packets around
            Connect to second host happens on packet arrival
    3. Handler proxy
        Bind on two ports, and shuffle packets around


    Protocol based
    --------------
        1. Generic TCP proxy
            Can proxy anything which uses TCP
        2. Generic UDP proxy
        3. Mysql / Psql proxies
        4. HTTP proxy
            HTTPS tunnelling via HTTP CONNECT
        etc. etc.

Jugaad: Write a generic TCP proxy
    -> easy!
    -> can proxy absolutely anything which uses TCP
        -> HTTP
        -> HTTPS
        -> TLS based protocols
        -> SSH/SMB/RDP/VNC/Whatever else

    Simplest one: forward proxy

        Step 1: Bind at local machine on given interface and port
        Step 2: Wait for incoming connection
        Step 3: Accept the connection
        Step 4: Connect to remote host (the destination)
        Step 5: Pass packets around (src -> dst, dst -> src)

    Limitations:
        1. We *CANNOT* have multiple destinations
            -> For each new destination, we need to listen to new/unique port
                port <---> destination pair must be unique.


    1. Compromise V1.
    2. Find other hosts in network, and compromise them if possible.
    3. If new compromised box leads to other parts of network (new vlans), this box is I1.
    4. From here, move into new vlan, and compromise another box. This box is V2

                                         [I1]
        [incoming connection] --------> [proxy] --------> [destination]         Forward
             [host machine 1] --------> [proxy] <-------- [host machine 2]      Handler
             [host machine 1] <-------- [proxy] --------> [host machine 2]      Reverse


        ./tcp_proxy <args> | <something else>
        <something else> | ./tcp_proxy ...


        If <something else> dies, pipe is broke, and our proxy is nuked!