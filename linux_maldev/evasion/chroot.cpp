#include <cstring>
#include <exception>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <string>

#include <errno.h>
#include <sched.h>
#include <sys/mount.h>
#include <sys/wait.h>

int RunChild(void *arg)
{
    std::cout << "child process with argument [" << (char*)arg << "]" << std::endl;

    // TODO: take this path from command line
    if (chroot("/tmp/rootfs") != 0)
    {
        std::cerr << "error 1: " << strerror(errno) << "\n";
        return -1;
    }

    if (chdir("/") != 0)
    {
        std::cerr << "error 2: " << strerror(errno) << "\n";
        return -2;
    }

    if (mount("proc", "/proc", "proc", 0, NULL) != 0)
    {
        std::cerr << "error 3: " << strerror(errno) << "\n";
        return -3;
    }

    std::ofstream t((char*)(arg), std::ios::binary);
    std::string data = "data to be written";
    t << data;
    t.close();

    return 0;
}

void WriteByChroot(std::filesystem::path filepath, std::filesystem::path scratch_path)
{
    // TODO: take this path from command line
    // TODO: prepare rootfs inside scratch path on-demand
    std::filesystem::path rootfs("/tmp/rootfs");

    /*
       1. Create a new folder inside new rootfs
       2. Perform a mount bind between filepath parent and new folder inside rootfs
       3. Change root.
       4. Access filepath from chroot environment
    */

    std::filesystem::path parent_path = filepath.parent_path();
    std::filesystem::path realhost = rootfs / std::filesystem::path("realhost");

    std::filesystem::create_directories(realhost);
    std::filesystem::create_directories(rootfs / std::filesystem::path("proc"));

    if(mount(parent_path.c_str(), realhost.c_str(), "", MS_BIND | MS_REC, "") != 0)
    {
        std::cerr << "error: " << strerror(errno) << "\n";
        return;
    }

    std::filesystem::path new_path = std::filesystem::path("/realhost/") / filepath.filename();

    char* child_stack = new char[1024 * 1024];
    pid_t child_pid = clone(RunChild, child_stack + 1024*1024, SIGCHLD, (void*)(new_path.c_str()));

    if (child_pid == -1)
    {
        std::cerr << "error: " << strerror(errno) << "\n";
    }
    else
    {
        wait(NULL);
    }

    delete child_stack;

    if (umount(realhost.c_str()) != 0)
    {
        std::cerr << "error: " << strerror(errno) << "\n";
        return;
    }

    std::filesystem::remove(realhost);
}

int main(int argc, char** argv)
{
    std::filesystem::path filepath = "/home/hacker/.ssh/magic", scratch_path = "/tmp";
    WriteByChroot(filepath, scratch_path);

    return 0;
}