#include <iostream>
#include <mutex>
#include <string>

#include "3rdparty/cpp-httplib/httplib.h"

std::string command;
std::string response;

std::mutex command_mutex;
std::mutex response_mutex;

std:: string execCommand(std::string command)
{

    std::string output = "";
    std::cout<<"Executed command ";
    std::cout<<command.c_str()<<std::endl;
    FILE *fp = popen(command.c_str(), "r");
    if (!fp)
    {
        std::cerr << "Can not start command" << std::endl;
        std::this_thread::sleep_for(std::chrono::seconds(5));
        //continue;
    }

    

    std::array<char,128> buffer;
    while(fgets(buffer.data(),128,fp) != NULL){
        output += buffer.data();

    }
    pclose(fp);
    return output;

}

int main()
{
    std::cout<<"Server started at 8080"<<std::endl;
    httplib::Server svr;

    svr.Get("/hi", [](const httplib::Request &, httplib::Response &res)
            { res.set_content("Hello World!", "text/plain"); });

    svr.Post("/setcmd", [](const httplib::Request &req, httplib::Response &res)
             {
        std::lock_guard<std::mutex> lock(command_mutex);
        command = req.body; });

    svr.Post("/setresponse", [](const httplib::Request &req, httplib::Response &res)
             {
        std::lock_guard<std::mutex> lock(response_mutex);
        response = req.body; });

    svr.Get("/getcmd", [](const httplib::Request &req, httplib::Response &res)
            {
        std::lock_guard<std::mutex> lock(command_mutex);
        res.body = command; });

    svr.Get("/getresponse", [](const httplib::Request &req, httplib::Response &res)
            {
        std::lock_guard<std::mutex> lock(response_mutex);
        res.body = response; });

    svr.Post("/execcommand", [](const httplib::Request &req, httplib::Response &res)
            {
                std::cout<<"Request received"<<std::endl;
        std::lock_guard<std::mutex> lock(response_mutex);
        std::string command = req.body;
        if(command.length() > 0){
           res.body= execCommand(command);
        }else{
        res.body = "No Data";} 
        
        });


    svr.listen("0.0.0.0", 8080);
    std::cout<<"Server started at 8080"<<std::endl;
    return 0;
}